{"version":3,"file":"static/js/449.8e0ab778.chunk.js","mappings":"kLACA,EAA0B,yBAA1B,EAAoE,gCAApE,EAA6G,wBAA7G,EAA8I,wBAA9I,EAAiL,0BAAjL,EAAqN,yB,mBCQxMA,EAAa,SAACC,GAEvB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,gBAAKC,UAAWC,EAAW,IAAMA,EAAjC,UACH,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCTrBC,EAAQ,SAACP,GAClB,OAAO,gBAAKG,UAAWC,EAAhB,SAA4BJ,EAAMQ,W,8BCKhCC,EAAiB,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXC,KAAM,IAEVC,SAAU,SAAAC,GACNP,GAASQ,EAAAA,EAAAA,GAAcD,EAAOF,OAC9BH,EAAOO,aAEXC,SAAU,SAACH,GACP,IAAMI,EAAqB,GAK3B,OAHKJ,EAAOF,OACRM,EAAON,KAAO,YAEXM,KAGf,OACI,kBAAML,SAAUJ,EAAOU,aAAvB,WACI,4BACI,qBACOhB,KAAK,OACLiB,YAAY,qBACZC,SAAUZ,EAAOa,aACjBC,MAAOd,EAAOK,OAAOF,OAE3BH,EAAOe,QAAQZ,MAAQH,EAAOS,OAAON,OACtC,gBAAKa,MAAO,CAACC,MAAM,OAAnB,SAA4BjB,EAAOS,OAAON,WAG9C,0BACI,SAAC,KAAD,CAAQe,KAAM,UAAWC,SAAU,SAAnC,wBCpCHC,EAAU,WAEnB,IAAMC,GAAUC,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMF,WAE1CG,EAAkBH,EAAQA,QAAQI,KAAI,SAAAC,GAAC,OAAI,SAACvC,EAAD,CAAYG,GAAIoC,EAAEpC,GAAeI,KAAMgC,EAAEhC,KAAMiC,OAAQD,EAAEC,QAA9BD,EAAEpC,OAExEsC,EAAmBP,EAAQQ,SAASJ,KAAI,SAAAK,GAAC,OAAI,SAACnC,EAAD,CAASC,QAASkC,EAAElC,QAAoBN,GAAIwC,EAAExC,IAAZwC,EAAExC,OAGrF,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKgC,KAEL,iBAAKjC,UAAWC,EAAhB,UACKoC,GACD,SAAC/B,EAAD,W,UCNhB,EAbyB,WAGrB,OAFeyB,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMQ,KAAKC,WAM1C,+BACI,SAACZ,EAAD,OAJD,SAAC,KAAD,CAAU3B,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__RAKAA\",\"dialogs__items\":\"Dialogs_dialogs__items__entm5\",\"dialog\":\"Dialogs_dialog__tyFwN\",\"active\":\"Dialogs_active__ZdwnD\",\"messages\":\"Dialogs_messages__yYoZK\",\"message\":\"Dialogs_message__su61K\"};","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PropsDialogType} from \"../../../redux/dialogsReducer\";\r\n\r\n\r\n\r\n\r\n\r\nexport const DialogItem = (props: PropsDialogType) => {\r\n\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport {PropsMessageType} from \"../../../redux/dialogsReducer\";\r\n\r\n\r\nexport const Message=(props: PropsMessageType) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\n","import React from \"react\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport Button from \"antd/es/button\";\r\nimport {useAppDispatch} from \"../../../redux/redux-store\";\r\nimport {Field, useFormik} from \"formik\";\r\nimport {SendMessageAC} from \"../../../redux/dialogsReducer\";\r\n\r\ntype FormikType = {\r\n    Text?: string\r\n}\r\n\r\nexport const AddMessageForm = () => {\r\n    const dispatch = useAppDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            Text: '',\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(SendMessageAC(values.Text))\r\n            formik.resetForm()\r\n        },\r\n        validate: (values:FormikType) => {\r\n            const errors: FormikType = {}\r\n\r\n            if (!values.Text) {\r\n                errors.Text = 'Required'\r\n            }\r\n            return errors\r\n        }\r\n    })\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <textarea\r\n                       name=\"Text\"\r\n                       placeholder=\"Enter your message\"\r\n                       onChange={formik.handleChange}\r\n                       value={formik.values.Text}\r\n                />\r\n                {formik.touched.Text && formik.errors.Text &&\r\n                <div style={{color:'red'}}>{formik.errors.Text}</div>\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button type={'default'} htmlType={'submit'}>\r\n                    Send\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {AddMessageForm} from \"./AddMessageForm/AddMessageForm\";\r\nimport {useAppSelector} from \"../../redux/redux-store\";\r\n\r\n\r\nexport const Dialogs = () => {\r\n\r\n    const dialogs = useAppSelector(state => state.dialogs)\r\n\r\n    let dialogsElements = dialogs.dialogs.map(d => <DialogItem id={d.id} key={d.id} name={d.name} avatar={d.avatar}/>);\r\n\r\n    let messagesElements = dialogs.messages.map(m => <Message message={m.message} key={m.id} id={m.id}/>);\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogs__items}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <AddMessageForm/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport {useAppSelector} from \"../../redux/redux-store\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nconst DialogsContainer = () => {\r\n    const isAuth = useAppSelector(state => state.auth.isAuth)\r\n\r\n    if (!isAuth) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n        return (\r\n            <>\r\n                <Dialogs />\r\n            </>\r\n        )\r\n}\r\n\r\nexport default DialogsContainer"],"names":["DialogItem","props","path","id","className","s","to","name","Message","message","AddMessageForm","dispatch","useAppDispatch","formik","useFormik","initialValues","Text","onSubmit","values","SendMessageAC","resetForm","validate","errors","handleSubmit","placeholder","onChange","handleChange","value","touched","style","color","type","htmlType","Dialogs","dialogs","useAppSelector","state","dialogsElements","map","d","avatar","messagesElements","messages","m","auth","isAuth"],"sourceRoot":""}