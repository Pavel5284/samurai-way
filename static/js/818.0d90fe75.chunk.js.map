{"version":3,"file":"static/js/818.0d90fe75.chunk.js","mappings":"+NAgBMA,EAAiB,WACnB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,UAUlD,OARAI,EAAAA,EAAAA,YAAU,WAEN,OADAN,GAASO,EAAAA,EAAAA,OACF,WACHP,GAASQ,EAAAA,EAAAA,UAEf,KAGK,2BACS,UAAXN,IAAsB,sEACvB,iCACI,SAACO,EAAD,KACA,SAACC,EAAD,WAMND,EAAyB,SAAC,ICvCjB,SAAmCE,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gCDsCC,IACrC,IAAMC,GAAWV,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKQ,YAC7CC,GAAoBC,EAAAA,EAAAA,QAAuB,MACjD,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAmBA,OAPAZ,EAAAA,EAAAA,YAAU,WACa,IAAD,EAAdW,IACA,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAS,cAEzD,CAACR,KAGG,iBAAKS,MAAO,CAACC,OAAQ,QAASC,UAAW,QAASC,SAjBnC,SAACC,GACpB,IAAMC,EAAUD,EAAEE,cACbC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAE7EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAWjC,UACFL,EAASqB,KAAI,SAACC,EAAGC,GAAJ,OAAc,SAACC,EAAD,CAAoBC,QAASH,GAAfA,EAAEI,QAC5C,gBAAKC,IAAK1B,QAKZuB,EAAoDI,EAAAA,MAAW,YAAgB,IAAdH,EAAa,EAAbA,QAEnE,OAAO,4BACH,gBAAKI,IAAKJ,EAAQK,MAAOrB,MAAO,CAACsB,MAAO,QAAQC,IAAI,KADjD,KACsD,uBAAIP,EAAQQ,YACrE,kBACCR,EAAQA,SACT,wBAIF5B,EAA0B,WAC5B,OAA8BM,EAAAA,EAAAA,UAAS,IAAvC,eAAOsB,EAAP,KAAgBS,EAAhB,KACK/C,GAAWC,EAAAA,EAAAA,MAEVC,GAASC,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,UAWlD,OAAO,4BACH,0BACI,qBAAU8C,SAAU,SAACtB,GAAD,OAAMqB,EAAWrB,EAAEE,cAAcqB,QAAQA,MAAOX,OAExE,0BACI,SAAC,KAAD,CAAQY,SAAqB,UAAXhD,EAAoBiD,QAbnB,WAClBb,IAGLtC,GAASoD,EAAAA,EAAAA,IAAYd,IACrBS,EAAW,MAQP,wBAMZ,EA9F2B,WACvB,OAAO,0BACH,SAAChD,EAAD","sources":["pages/Chat/ChatPage.tsx","../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"sourcesContent":["import {Button} from \"antd\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {useAppDispatch, useAppSelector} from \"../../redux/redux-store\";\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\r\nimport { ChatMessageAPIType } from \"../../api/chat-api\";\r\n\r\n\r\n\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return <div>\r\n        <Chat/>\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const status = useAppSelector(state => state.chat.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    },[])\r\n\r\n\r\n    return <div>\r\n        {status === 'error' && <div>Some error occured. Please refresh page</div>}\r\n        <>\r\n            <Messages/>\r\n            <AddMessageForm/>\r\n        </>\r\n\r\n    </div>\r\n}\r\n\r\nconst Messages: React.FC<{}> = ({}) => {\r\n   const messages = useAppSelector(state => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n       const element = e.currentTarget\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300)\r\n        {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior:'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n\r\n    return <div style={{height: '400px', overflowY: 'auto'}} onScroll={scrollHandler}>\r\n        {messages.map((m, index) => <Message key={m.id} message={m}/>)}\r\n        <div ref={messagesAnchorRef}></div>\r\n\r\n    </div>\r\n}\r\n\r\nconst Message: React.FC<{message: ChatMessageAPIType}> =  React.memo(({message}) => {\r\n\r\n    return <div>\r\n        <img src={message.photo} style={{width: '30px'}}alt=\"\"/> <b>{message.userName}</b>\r\n        <br/>\r\n        {message.message}\r\n        <hr/>\r\n    </div>\r\n})\r\n\r\nconst AddMessageForm: React.FC= () => {\r\n    const [message, setMessage] = useState('')\r\n   const dispatch = useAppDispatch()\r\n\r\n    const status = useAppSelector(state => state.chat.status)\r\n\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <textarea onChange={(e)=> setMessage(e.currentTarget.value)} value={message}></textarea>\r\n        </div>\r\n        <div>\r\n            <Button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nexport default ChatPage","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"names":["Chat","dispatch","useAppDispatch","status","useAppSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","obj","TypeError","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","src","photo","width","alt","userName","setMessage","onChange","value","disabled","onClick","sendMessage"],"sourceRoot":""}