{"version":3,"file":"static/js/445.4d1cecb5.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__8ygZl\",\"description__block\":\"Profile_description__block__Tu6N4\"};","// extracted by mini-css-extract-plugin\nexport default {\"main__image\":\"ProfileInfo_main__image__NW0Zx\",\"description__block\":\"ProfileInfo_description__block__WSrD1\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\n\r\ntype PropsType = {\r\n    status: string;\r\n    updateStatus: (status:string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props:PropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    },[props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || '-----'}</span>\r\n            </div>\r\n            }\r\n\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport {ProfileType} from \"../../../redux/state\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\r\n\r\n     if(!props.profile) {\r\n       return <Preloader/>\r\n     }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.main__image}>\r\n                <img\r\n                    src=\"https://www.culture.ru/storage/images/34a20c3ceeb456e7225316a0c05902e9/1a088b633c9a35946b82f904b8f7dfc5.jpeg\"\r\n                    alt=\"image\"/>\r\n            </div>\r\n            <div className={s.description__block}>\r\n                <img src={props.profile.photos.large || \"https://sun9-40.userapi.com/impg/xpQLmHEXpp2_NoBuiQ5eQ7zXd_Ka7MZxToTO5g/7rzipkNl1Ng.jpg?size=460x604&quality=96&sign=d7a38b815e4dcb25457baba995df2c05&type=album\"} alt=\"profile avatar\"/>\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"posts__block\":\"MyPosts_posts__block__BIfB4\",\"posts\":\"MyPosts_posts__+v8u2\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__x08pL\",\"item__image\":\"Post_item__image__QKBkY\"};","import React from \"react\";\r\nimport s from \"./Post.module.css\";\r\nimport {PostDataType} from \"../../../../redux/profileReducer\";\r\n\r\n\r\n/*type PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}*/\r\n\r\nexport const Post = (props: PostDataType) => {\r\n    return (\r\n\r\n        <div className={s.item}>\r\n            <img className={s.item__image}\r\n                src=\"https://sun9-40.userapi.com/impg/xpQLmHEXpp2_NoBuiQ5eQ7zXd_Ka7MZxToTO5g/7rzipkNl1Ng.jpg?size=460x604&quality=96&sign=d7a38b815e4dcb25457baba995df2c05&type=album\"\r\n                alt=\"ava\"/>\r\n            {props.message}\r\n\r\n            <div>\r\n                <span>like </span>\r\n                {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\n\r\nexport const MyPosts = React.memo(\r\n    (props: MyPostsPropsType) => {\r\n        let postsElements =\r\n            props.posts.map(p => <Post key={p.id} id={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n        let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n        const onAddPost = (values:FormDataType) => {\r\n            props.addPost(values.newPostText);\r\n        }\r\n\r\n\r\n\r\n        return (\r\n            <div className={s.posts__block}>\r\n                <div>\r\n                    <h3>My post</h3>\r\n                    <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n                    <div className={s.posts}>\r\n                        {postsElements}\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n)\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>>  = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea} name=\"newPostText\" placeholder={\"Post message\"}\r\n                validate={[required, maxLength10]}\r\n            />\r\n        </div>\r\n        <div>\r\n            <button>Add post</button>\r\n        </div>\r\n    </form>\r\n}\r\nconst AddNewPostFormRedux = reduxForm<FormDataType>({form: \"ProfileAddNewPostForm\"}) (AddNewPostForm)","import React  from \"react\";\r\nimport {addPost,  PostDataType} from \"../../../redux/profileReducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {AppStateRootType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    posts: PostDataType[]\r\n\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addPost: (text: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStatePropsType & mapDispatchToPropsType\r\n\r\n\r\nconst mapStateToProps = (state: AppStateRootType): MapStatePropsType=> {\r\n    return {\r\n        posts: state.profile.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) : mapDispatchToPropsType=> {\r\n    return {\r\n        addPost: (text: string) => {\r\n            dispatch(addPost(text))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps) (MyPosts)","import React from \"react\";\r\nimport s from \"./Profile.module.css\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\nexport const Profile = (props: any) => {\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, setUserProfile, updateStatus} from \"../../redux/profileReducer\";\r\nimport {AppStateRootType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../redux/state\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAutRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype OwnPropsType = MapStatePropsType & DispatchPropsType\r\n\r\nclass ProfileContainer extends React.Component <PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId && this.props.authorizedUserId) {\r\n            userId = `${this.props.authorizedUserId}`;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n\r\n        this.props.getUserProfile(Number(userId));\r\n        this.props.getStatus(Number(userId))\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile}\r\n                     status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\nexport type MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null,\r\n    isAuth: boolean\r\n}\r\nexport type DispatchPropsType = {\r\n    setUserProfile: (profile: ProfileType) => void\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateRootType) : MapStatePropsType => ({\r\n    profile: state.profile.profile,\r\n    status: state.profile.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAutRedirect,\r\n    withRouter,\r\n    connect<MapStatePropsType,DispatchPropsType,{},AppStateRootType>(mapStateToProps, {getUserProfile, setUserProfile, getStatus, updateStatus}))\r\n(ProfileContainer)\r\n\r\n// export default redirectProf","import React from \"react\";\r\nimport s from \"./FormsControls.module.css\"\r\nimport {Field, WrappedFieldProps} from \"redux-form\";\r\n\r\nconst FormControl = ({input, meta, child, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.form_control + \" \" + (hasError ? s.error : \"\")}>\r\n            {props.children}\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, child, ...restProps}: any = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, child, ...restProps}: any = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string,\r\n                            validators: ((value: string) => string | undefined)[],\r\n                            component: React.FC<WrappedFieldProps>, props = {}, text = '') => {\r\n    return (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n    )\r\n\r\n}","export const required = (value:any) => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator= (maxLength: number) => (value: string) => {\r\n    if (value && value.length > maxLength)\r\n        return `Max length is ${maxLength} symbols`;\r\n\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"form_control\":\"FormsControls_form_control__FY0lk\",\"error\":\"FormsControls_error__Ah36m\",\"form_summary_error\":\"FormsControls_form_summary_error__Tj7jl\"};"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","className","s","src","alt","photos","large","Preloader","Post","message","likesCount","MyPosts","React","postsElements","posts","map","p","id","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPostsContainer","connect","state","dispatch","text","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","Number","getStatus","compose","withAutRedirect","withRouter","auth","isAuth","setUserProfile","FormControl","input","meta","child","hasError","touched","error","children","restProps","Input","createField","validators","maxLength","length"],"sourceRoot":""}