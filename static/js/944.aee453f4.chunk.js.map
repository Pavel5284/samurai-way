{"version":3,"file":"static/js/944.aee453f4.chunk.js","mappings":"+MAkCMA,GAAiBC,EAAAA,EAAAA,GAAwB,CAC3CC,KAAM,SADaD,EAlBsC,SAACE,GAC1D,OACA,kBAAMC,SAAUD,EAAME,aAAtB,WACSC,EAAAA,EAAAA,IAAY,QAAS,QAAS,CAACC,EAAAA,GAAWC,EAAAA,KAC1CF,EAAAA,EAAAA,IAAY,WAAY,WAAY,CAACC,EAAAA,GAAWC,EAAAA,GAAO,CAACC,KAAM,cAC9DH,EAAAA,EAAAA,IAAY,KAAM,aAAc,GAAIE,EAAAA,GACjC,CAACC,KAAM,YAAa,eAC3BN,EAAMO,QAAS,gBAAKC,UAAWC,EAAAA,EAAAA,mBAAhB,SACXT,EAAMO,SAGX,0BACI,8CAyBZ,WAAeG,EAAAA,EAAAA,KAHS,SAACC,GAAD,MAAiB,CACrCC,OAAQD,EAAME,KAAKD,UAEkB,CAACE,MAAAA,EAAAA,IAA1C,EAfc,SAACd,GAIX,OAAIA,EAAMY,QACC,SAAC,KAAD,CAAUG,GAAI,cAElB,4BACP,mCACA,SAAClB,EAAD,CAAiBI,SARA,SAACe,GACfhB,EAAMc,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG,sB,sPCpCzDC,EAAc,SAAC,GAAwC,EAAvCC,MAAwC,IAAjCC,EAAgC,EAAhCA,KAAgBtB,GAAgB,EAA1BuB,OAA0B,aACnDC,EAAWF,EAAKG,SAAWH,EAAKf,MACtC,OACI,iBAAKC,UAAWC,EAAAA,EAAAA,aAAiB,KAAOe,EAAWf,EAAAA,EAAAA,MAAU,IAA7D,UACKT,EAAM0B,SACNF,IAAY,0BAAOF,EAAKf,YAMxBoB,EAAwC,SAAC3B,GAClD,IAAOqB,EAAyCrB,EAAzCqB,MAAuBO,GAAkB5B,EAAlCsB,KAAkCtB,EAA5BuB,OAApB,OAAgDvB,EAAhD,IACA,OACI,SAACoB,GAAD,kBAAiBpB,GAAjB,cACI,uCAAcqB,GAAWO,QAMxBvB,EAAqC,SAACL,GAC/C,IAAOqB,EAAyCrB,EAAzCqB,MAAuBO,GAAkB5B,EAAlCsB,KAAkCtB,EAA5BuB,OAApB,OAAgDvB,EAAhD,IACA,OACI,SAACoB,GAAD,kBAAiBpB,GAAjB,cACI,oCAAWqB,GAAWO,QAKrBzB,EAAc,SAAC0B,EAA4BC,EAC5BC,EACAC,GAAmE,IAA3BhC,EAA0B,uDAAlB,GAAIiC,EAAc,uDAAP,GACnF,OACA,4BACI,SAAC,KAAD,QAAOJ,YAAaA,EAAaC,KAAMA,EAChCI,SAAUH,EACVC,UAAWA,GACPhC,IAJf,IAKQiC,O,4EC3CL,IAAM7B,EAAW,SAAC+B,GACrB,IAAIA,EAEJ,MAAO,qBAGEC,EAAkB,SAACC,GAAD,OAAuB,SAACF,GACnD,GAAIA,GAASA,EAAMG,OAASD,EACxB,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCPR,KAAgB,aAAe,oCAAoC,MAAQ,6BAA6B,mBAAqB","sources":["components/Login/Login.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {login} from \"../../redux/authReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport s from \"./../common/FormsControls/FormsControls.module.css\"\r\n\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n    <form onSubmit={props.handleSubmit}>\r\n            {createField('Email', 'email', [required], Input )}\r\n            {createField('Password', 'password', [required], Input, {type: 'password'} )}\r\n            {createField(null, 'rememberMe', [], Input,\r\n                {type: 'checkbox'}, 'remember me' )}\r\n        {props.error && <div className={s.form_summary_error}>\r\n            {props.error}\r\n        </div>\r\n        }\r\n        <div>\r\n            <button>Login</button>\r\n        </div>\r\n    </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({\r\n    form: 'login'\r\n}) (LoginForm)\r\n\r\nconst Login = (props: any) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n       props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return <div>\r\n    <h1>LOGIN</h1>\r\n    <LoginReduxForm  onSubmit={onSubmit}/>\r\n</div>\r\n}\r\nconst mapStateToProps = (state: any) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect (mapStateToProps, {login}) (Login);","import React from \"react\";\r\nimport s from \"./FormsControls.module.css\"\r\nimport {Field, WrappedFieldProps} from \"redux-form\";\r\n\r\nconst FormControl = ({input, meta, child, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.form_control + \" \" + (hasError ? s.error : \"\")}>\r\n            {props.children}\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, child, ...restProps}: any = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, child, ...restProps}: any = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string,\r\n                            validators: ((value: string) => string | undefined)[],\r\n                            component: React.FC<WrappedFieldProps>, props = {}, text = '') => {\r\n    return (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n    )\r\n\r\n}","export const required = (value:any) => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator= (maxLength: number) => (value: string) => {\r\n    if (value && value.length > maxLength)\r\n        return `Max length is ${maxLength} symbols`;\r\n\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"form_control\":\"FormsControls_form_control__FY0lk\",\"error\":\"FormsControls_error__Ah36m\",\"form_summary_error\":\"FormsControls_form_summary_error__Tj7jl\"};"],"names":["LoginReduxForm","reduxForm","form","props","onSubmit","handleSubmit","createField","required","Input","type","error","className","s","connect","state","isAuth","auth","login","to","formData","email","password","rememberMe","FormControl","input","meta","child","hasError","touched","children","Textarea","restProps","placeholder","name","validators","component","text","validate","value","maxLengthCreator","maxLength","length"],"sourceRoot":""}