{"version":3,"file":"static/js/3.3488945a.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__RAKAA\",\"dialogs__items\":\"Dialogs_dialogs__items__entm5\",\"dialog\":\"Dialogs_dialog__tyFwN\",\"active\":\"Dialogs_active__ZdwnD\",\"messages\":\"Dialogs_messages__yYoZK\",\"message\":\"Dialogs_message__su61K\"};","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PropsDialogType} from \"../../../redux/dialogsReducer\";\r\n\r\n\r\n\r\n\r\n\r\nexport const DialogItem = (props: PropsDialogType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport {PropsMessageType} from \"../../../redux/dialogsReducer\";\r\n\r\n\r\nexport const Message=(props: PropsMessageType) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\n","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\n\r\n\r\nexport const Dialogs:React.FC<DialogsPropsType> = (props: DialogsPropsType) => {\r\n\r\n    let dialogsElements = props.dialogs.dialogs\r\n        .map(d => <DialogItem id={d.id} key={d.id} name={d.name}/>);\r\n\r\n    let messagesElements = props.dialogs.messages\r\n        .map(m => <Message message={m.message} key={m.id}/>);\r\n\r\n\r\n    const addNewMessage = (values:FormDataType) => {\r\n       props.sendMessage(values.newMessageBody)\r\n    }\r\n   // if (!props.isAuth) return <Redirect to={\"/login\"}/>;\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogs__items}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\nconst maxLength50 = maxLengthCreator(50);\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                        validate={[required, maxLength50]}\r\n                       name=\"newMessageBody\" placeholder=\"Enter your message\"/>\r\n        </div>\r\n            <button>Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: \"dialogAddMessageForm\"}) (AddMessageForm);","import React from \"react\";\r\nimport {InitialStateType, MessagesPageType, SendMessageActionCreator} from \"../../redux/dialogsReducer\";\r\nimport {AppStateRootType, StoreAppType} from \"../../redux/redux-store\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAutRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\n\r\n\r\ntype MapStateToPropsType = {\r\n dialogs: InitialStateType\r\n   // isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nlet mapStateToProps = (state: AppStateRootType): MapStateToPropsType => {\r\n    return {\r\n        dialogs: state.dialogs\r\n        //isAuth: state.auth.isAuth\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n    sendMessage: (newMessageBody: string) => {\r\n        dispatch(SendMessageActionCreator(newMessageBody))\r\n    }\r\n    }\r\n}\r\n\r\n/*export const DialogsContainer = connect (mapStateToProps, mapDispatchToProps) (Dialogs)*/\r\n export default compose<React.ComponentType<{}>>(\r\n     withAutRedirect,\r\n     withRouter,\r\n     connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateRootType> (mapStateToProps, mapDispatchToProps)\r\n )(Dialogs)","import React from \"react\";\r\nimport s from \"./FormsControls.module.css\"\r\nimport {Field, WrappedFieldProps} from \"redux-form\";\r\n\r\nconst FormControl = ({input, meta, child, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.form_control + \" \" + (hasError ? s.error : \"\")}>\r\n            {props.children}\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, child, ...restProps}: any = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, child, ...restProps}: any = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string,\r\n                            validators: ((value: string) => string | undefined)[],\r\n                            component: React.FC<WrappedFieldProps>, props = {}, text = '') => {\r\n    return (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n    )\r\n\r\n}","export const required = (value:any) => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator= (maxLength: number) => (value: string) => {\r\n    if (value && value.length > maxLength)\r\n        return `Max length is ${maxLength} symbols`;\r\n\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"form_control\":\"FormsControls_form_control__FY0lk\",\"error\":\"FormsControls_error__Ah36m\",\"form_summary_error\":\"FormsControls_form_summary_error__Tj7jl\"};"],"names":["DialogItem","props","path","id","className","s","to","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","compose","withAutRedirect","withRouter","connect","state","dialogs","dispatch","sendMessage","newMessageBody","SendMessageActionCreator","dialogsElements","map","d","messagesElements","messages","m","values","FormControl","input","meta","child","hasError","touched","error","children","restProps","Input","createField","validators","text","value","maxLength","length"],"sourceRoot":""}