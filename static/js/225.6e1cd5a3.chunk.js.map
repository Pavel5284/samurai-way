{"version":3,"file":"static/js/225.6e1cd5a3.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50","components/common/FormsControls/FormsControls.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__8ygZl\",\"description__block\":\"Profile_description__block__Tu6N4\"};","// extracted by mini-css-extract-plugin\nexport default {\"main__image\":\"ProfileInfo_main__image__NW0Zx\",\"description__block\":\"ProfileInfo_description__block__WSrD1\",\"profile__block\":\"ProfileInfo_profile__block__MltAe\",\"profile__button\":\"ProfileInfo_profile__button__iJ+ML\",\"mainPhoto\":\"ProfileInfo_mainPhoto__X8wrp\",\"contact\":\"ProfileInfo_contact__WjCU4\"};","// extracted by mini-css-extract-plugin\nexport default {\"form_control\":\"FormsControls_form_control__FY0lk\",\"error\":\"FormsControls_error__Ah36m\",\"form_summary_error\":\"FormsControls_form_summary_error__Tj7jl\"};","import React from \"react\";\r\nimport s from \"./FormsControls.module.css\"\r\nimport {Field, WrappedFieldProps} from \"redux-form\";\r\n\r\nconst FormControl = ({input, meta, child, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.form_control + \" \" + (hasError ? s.error : \"\")}>\r\n            {props.children}\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, child, ...restProps}: any = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, child, ...restProps}: any = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string,\r\n                            validators: ((value: string) => string | undefined)[],\r\n                            component: React.FC<WrappedFieldProps>, props = {}, text = '') => {\r\n    return (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n    )\r\n\r\n}","import {ProfileType} from \"../../../redux/state\";\r\nimport React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport style from '../../common/FormsControls/FormsControls.module.css';\r\nimport Button from \"antd/es/button\";\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType>> = (props) => {\r\n    const {handleSubmit, initialValues, error} = props\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <Button type={'default'} onClick={handleSubmit}>Save</Button>\r\n            {error && <div className={style.form_summary_error}>\r\n                {error}\r\n            </div>}\r\n\r\n        </div>\r\n        <div>\r\n            <b>Full name</b>:\r\n            {createField('Full name', 'fullName', [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>:\r\n            {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n        </div>\r\n        <div>\r\n            <b>My professional skills</b>:\r\n            {createField('My professional skills', 'lookingForAJobDescription', [], Textarea)}\r\n        </div>\r\n\r\n        <div>\r\n            <b>About me</b>:\r\n            {createField('About me', 'aboutMe', [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(initialValues.contacts ?? {}).map((key) => {\r\n            return <div key={key} className={s.contact}>\r\n                <b>{key}: {createField(key, 'contacts.' + key, [], Input)}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport const ProfileDataFormReduxForm = reduxForm<ProfileType>({form: 'edit-profile'})(ProfileDataForm)","import Input from 'antd/es/input';\r\nimport React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useAppDispatch, useAppSelector} from \"../../../redux/redux-store\";\r\nimport {updateStatus} from \"../../../redux/profileReducer\";\r\n\r\ntype PropsType = {\r\n    status?: string\r\n    updateStatus?: () => void\r\n}\r\n\r\nexport const ProfileStatus:React.FC<PropsType> = (props) => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const statusFromState = useAppSelector<string>( state => state.profile.status)\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [status, setStatus] = useState<string>(statusFromState);\r\n\r\n    useEffect(() => {\r\n        setStatus(statusFromState);\r\n    },[statusFromState])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        dispatch(updateStatus(status));\r\n    }\r\n\r\n    const onStatusChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status: </b> <span onDoubleClick={activateEditMode}>{statusFromState || '-----'}</span>\r\n            </div>\r\n            }\r\n\r\n            {editMode &&\r\n            <div>\r\n                <Input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","import React, {useRef, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ContactType, ProfileType} from \"../../../redux/state\";\r\nimport userIcon from \"../../../assets/images/user.png\";\r\nimport {ProfileDataFormReduxForm} from \"./ProfileDataForm\";\r\nimport Button from \"antd/es/button\";\r\nimport Input from \"antd/es/input\";\r\nimport {useAppDispatch, useAppSelector} from \"../../../redux/redux-store\";\r\nimport {savePhoto, saveProfile} from \"../../../redux/profileReducer\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport {Avatar} from \"antd\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n}\r\n\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = (props) => {\r\n    const dispatch = useAppDispatch()\r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const userLargeAvatar = useAppSelector(state => state.profile.profile?.photos.large)\r\n    const error = useAppSelector(state => state.profile.formError)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: { target: any }) => {\r\n        if (e.target.files.length) {\r\n            dispatch(savePhoto(e.target.files[0]))\r\n        }\r\n    }\r\n    const selectFileHandler = () => {\r\n        inputRef && inputRef.current?.click();\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        dispatch(saveProfile(formData))\r\n        if (error) {\r\n            setEditMode(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.profile__block}>\r\n            <Avatar src={userLargeAvatar || userIcon} alt=\"user Avatar\"\r\n                    size={150}/>\r\n            {props.isOwner && (\r\n                <>\r\n                    <Button  className={s.profile__button} onClick={selectFileHandler}>Change Photo</Button>\r\n                    <input\r\n                        style={{display: 'none'}}\r\n                        type=\"file\"\r\n                        ref={inputRef}\r\n                        onChange={onMainPhotoSelected}/>\r\n                </>\r\n            )\r\n            }\r\n            <ProfileStatus/>\r\n            {editMode ? <ProfileDataFormReduxForm\r\n                initialValues={props.profile}\r\n                onSubmit={onSubmit}\r\n            /> : <ProfileData profile={props.profile}\r\n                              isOwner={props.isOwner}\r\n                              goToEditMode={() => {\r\n                                  setEditMode(true)\r\n                              }}\r\n\r\n            />\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType,\r\n    isOwner: boolean,\r\n    goToEditMode: () => void\r\n}\r\nconst ProfileData = (props: ProfileDataPropsType) => {\r\n    return <div className={s.description__block}>\r\n        {props.isOwner && <div>\r\n            <Button type={'default'} onClick={props.goToEditMode}>Edit</Button>\r\n        </div>}\r\n        <div>\r\n            <b>Full name</b>: {props.profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        <div>\r\n            <b>My professional skills</b>: {props.profile.lookingForAJobDescription}\r\n        </div>\r\n        <div>\r\n            <b>About me</b>: {props.profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(props.profile.contacts).map((key) => {\r\n            return <Contact key={key} contactTitle={key}\r\n                            contactValue={props.profile.contacts[key as keyof ContactType]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\ntype ContactProps = {\r\n    contactTitle: string\r\n    contactValue?: string\r\n}\r\nexport const Contact = ({contactTitle, contactValue}: ContactProps) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue ?? '-'}</div>\r\n}","import React from \"react\";\r\nimport s from \"./Profile.module.css\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {useAppSelector} from \"../../redux/redux-store\";\r\n\r\ntype ProfilePropsType = {\r\n    isOwner: boolean\r\n}\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n    const profile = useAppSelector(state => state.profile.profile)\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo\r\n                isOwner={props.isOwner}\r\n                profile={profile}\r\n               />\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {getStatus, getUserProfile} from \"../../redux/profileReducer\";\r\nimport {useAppDispatch, useAppSelector} from \"../../redux/redux-store\";\r\nimport {Navigate, useParams} from \"react-router-dom\";\r\n\r\n\r\nconst ProfileContainer = () => {\r\n\r\n    let {userId} = useParams()\r\n    const dispatch = useAppDispatch()\r\n\r\n        const authorizedUserId = useAppSelector<number>(state => state.auth.userId!)\r\n    if(!userId)\r\n    {userId = authorizedUserId+''}\r\n        const isOwner = +userId! === authorizedUserId\r\n    const isAuth = useAppSelector(state => state.auth.isAuth)\r\n\r\n    useEffect(() => {\r\n        if (userId === null || authorizedUserId === null) return\r\n        dispatch(getUserProfile(+userId! ? +userId! : authorizedUserId))\r\n        dispatch(getStatus(+userId! ? +userId! : authorizedUserId))\r\n    }, [userId])\r\n\r\n    if (!isAuth) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <Profile\r\n            isOwner={isOwner}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ProfileContainer"],"names":["FormControl","input","meta","props","child","hasError","touched","error","className","s","children","Textarea","restProps","Input","createField","placeholder","name","validators","component","text","Field","validate","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","initialValues","onSubmit","type","onClick","style","Object","keys","contacts","map","key","ProfileStatus","dispatch","useAppDispatch","statusFromState","useAppSelector","state","profile","status","useState","editMode","setEditMode","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","inputRef","useRef","userLargeAvatar","photos","large","formError","Preloader","src","userIcon","alt","size","isOwner","current","click","display","ref","target","files","length","savePhoto","formData","saveProfile","ProfileData","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","Profile","userId","useParams","authorizedUserId","auth","isAuth","getUserProfile","getStatus","to"],"sourceRoot":""}